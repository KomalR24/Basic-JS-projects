*,*::after,*::before{ /*before and after pseudo element*/
    box-sizing: border-box; 
    /*The box-sizing property allows us to include the padding and border in an element's total width and height.
If you set box-sizing: border-box; on an element, padding and border are included in the width and height. same size boxes irrespective of padding and border */
    overflow: hidden;
}

:root{ /*The :root selector matches the document's root element. here, creating variables*/
    --cell-size: 100px;
    --mark-size: calc(var(--cell-size)*.8); /*calculating size of cross and zero to be 90% of size if the cell*/
}

body{
    margin:0; /*removes all the margin from the body so that we can further customize on out own*/
}

h1{
    text-align: center;
}


.board{
    width: 100vw; /*view width*/
    height: 100vh; /*view width*/
    display: grid;
    justify-content: center; /*aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).*/
    align-content: center; /*modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex items, it aligns flex lines.(vertically)*/
    justify-items: center;/*defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis.*/
    align-items: center; /*specifies the default alignment for items inside the flexible container. we may use align-self of each item to override this for specific. */
    grid-template-columns: repeat(3,auto); /*specifies the number (and the widths) of columns in a grid layout. eg: grid-template-columns: 30px 200px auto 100px;*/
}

.cell{
    width: var(--cell-size);
    height: var(--cell-size);
    border: 2px solid black; /*The border property is a shorthand property for the following individual border properties: 
    1. border-width 2. border-style (required) 3. border-color*/
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative; /*The position property specifies the type of positioning method used for an element (static, relative, fixed, absolute or sticky).
    position: fixed is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled.
    A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).*/
    cursor: pointer; /*a simple pointer cursor*/
}

/*removing borders from the grid*/

/*top borders from 1 2 3 removed*/
.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3){
    border-top: none;
}

/*left border from 1 4 7 removed*/
.cell:nth-child(3n+1){
    border-left: none;
}

/*right border from 3 6 9 removed*/
.cell:nth-child(3n+3){
    border-right: none;
}

/*bottom border from 7 8 9 removed*/
.cell:nth-child(7),
.cell:nth-child(8),
.cell:last-child{
    border-bottom: none;
}

.cell.x,
.cell.circle{
    cursor:not-allowed; /*a not allowed cursor on cells that are already have x or circle*/
}

.cell.x::after,
.cell.x::before,
.cell.circle::before{
    background-color: black;
}

.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after,
.board.circle .cell:not(.x):not(.circle):hover::before{
    background-color: lightgrey;
}

/*creating the cross*/
.cell.x::after,
.cell.x::before,
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after{
    content : ''; 
    position: absolute; /* is positioned relative to the nearest positioned ancestor(i.e. cell here).enables overlap*/
    width: calc(var(--mark-size)* .15);
    height: var(--mark-size); 
}

.cell.x::before,
.board.x .cell:not(.x):not(.circle):hover::before{
    transform: rotate(45deg); 
}

.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::after{
    transform: rotate(-45deg);
}

.cell.circle::after,
.cell.circle::before,
.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after{
    content: '';
    position: absolute;
    border-radius: 50%;
}

.cell.circle::before,
.board.circle .cell:not(.x):not(.circle):hover::before{
    width: var(--mark-size);
    height: var(--mark-size);
}

.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::after{
    width: calc(var(--mark-size)* .7);
    height: calc(var(--mark-size)* .7);
    background-color: white;
}

.winning-message{
    display: none;
    position: fixed;
    top:0;
    left: 0;
    right:0;
    bottom: 0;
    justify-content: center;
    align-items: center;
    color: white;
    background-color: rgba(0,0,0,.9);
    font-size: 5rem;
    flex-direction: column;
}

.winning-message button{
    font-size: 3rem;
    background-color: white;
    border: 1px solid black;
    padding: .25em .5em;
    cursor: pointer;
}

.winning-message button:hover{
    background-color: black;
    color: white;
    border-color: white;
}

.winning-message.show{
    display: flex;
}